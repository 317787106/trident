buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.owasp:dependency-check-gradle:8.2.0"
    }
}

plugins {
    id 'java-library'
}

def VERSION = '0.9.2'

ext {
    bouncycastleVersion = '1.78.1'
    junitJupiterVersion = '5.4.2'
    googleGuavaVersion = '33.0.0-jre'
}


allprojects {
    version = VERSION
    group = 'org.tron.trident'

    repositories {
        mavenCentral()
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
        options.charSet = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')

        options {
            tags = [
                    'apiNote:a:API Note:',
                    'implSpec:a:Implementation Requirements:',
                    'implNote:a:Implementation Note:'
            ]
        }

        exclude '**/internal/**'
        exclude '**/impl/**'
        failOnError = false

        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'org.owasp.dependencycheck'

    tasks.withType(Jar) {
        destinationDirectory = rootProject.file("build/libs")
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"

        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }

    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.register('wrapper', Wrapper) {
        gradleVersion = '6.6.1'
    }

    tasks.withType(JavaCompile).configureEach {
        //options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    artifacts {
        archives jar
        archives sourcesJar
    }
}

def jarTasks = [
        fatJar: tasks.register('fatJar', Jar) {
            archiveBaseName = 'trident'
            archiveVersion = VERSION
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE

            dependsOn subprojects.collect { project ->
                project.tasks.withType(Jar)
            }

            from {
                subprojects.collect { project ->
                    project.sourceSets.main.output
                }
            }

            from {
                subprojects.collect { project ->
                    project.configurations.runtimeClasspath.collect {
                        it.isDirectory() ? it : zipTree(it)
                    }
                }
            }

        }
]

javadoc {
    source subprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    archiveVersion = VERSION
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    archiveVersion = VERSION
    from subprojects.collect { project ->
        project.sourceSets.main.allSource
    }
}

tasks.named('build') {
    dependsOn fatJar, javadocJar, sourcesJar
}