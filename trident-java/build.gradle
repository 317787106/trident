def VERSION = '0.9.2'

buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
        }
        mavenCentral()
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'

ext {
    bouncycastleVersion = '1.78.1'
    junitJupiterVersion = '5.4.2'
    googleGuavaVersion = '33.0.0-jre'
}

allprojects {
    version = VERSION
    group = 'io.github.317787106'
    //group = 'org.tron.trident'

    repositories {
        mavenCentral()
    }

    tasks.withType(Javadoc).tap {
        configureEach {
            options.encoding = 'UTF-8'
            options.charSet = 'UTF-8'
            options.addStringOption('Xdoclint:none', '-quiet')

            options {
                tags = [
                        'apiNote:a:API Note:',
                        'implSpec:a:Implementation Requirements:',
                        'implNote:a:Implementation Note:'
                ]
            }

            exclude '**/internal/**'
            exclude '**/impl/**'
            failOnError = false

            logging.captureStandardError LogLevel.INFO
            logging.captureStandardOutput LogLevel.INFO
        }
    }

    configurations.configureEach {
        resolutionStrategy{
            force "com.google.guava:guava:$googleGuavaVersion"
        }
    }
}

subprojects {
    apply plugin: 'java'

    tasks.withType(Jar).configureEach {
        destinationDirectory = rootProject.file("build/libs")
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"

        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }

    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(JavaCompile).configureEach {
        //options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }
}

shadowJar {
    zip64 = true
}

javadoc {
    source subprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    archiveVersion = VERSION
    from javadoc
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    archiveVersion = VERSION
    from subprojects.collect { project ->
        project.sourceSets.main.allSource
    }
}

tasks.register('buildLib', Jar) {
    archiveVersion = VERSION
    from subprojects.collect { project ->
        project.sourceSets.main.output
    }
}

tasks.named('build') {
    dependsOn javadocJar, sourcesJar, buildLib
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = project.group
            artifactId = 'trident'
            version = project.version

            pom {
                name = 'trident'
                description = 'Java implementation of trident'
                url = 'https://github.com/317787106/trident'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'jiangyuanshu'
                        email = '317787106@qq.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/317787106/trident.git'
                    developerConnection = 'scm:git:ssh://github.com/317787106/trident.git'
                    url = 'https://github.com/317787106/trident'
                }

                // collect all dependencies of subprojects
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    def seenDependencies = [] as Set
                    subprojects.each { subproject ->
                        {
                            subproject.properties.configurations.implementation.allDependencies.each { dep ->
                                {//println dep
                                    if (dep.group != null && dep.name != null && dep.version != null && dep.group != group) {
                                        def dependencyIdentifier = "${dep.group}:${dep.name}:${dep.version}"
                                        //drop duplicate
                                        if (!seenDependencies.contains(dependencyIdentifier)) {
                                            seenDependencies << dependencyIdentifier
                                            def dependencyNode = dependenciesNode.appendNode('dependency')
                                            dependencyNode.appendNode('groupId', dep.group)
                                            dependencyNode.appendNode('artifactId', dep.name)
                                            dependencyNode.appendNode('version', dep.version)
                                            dependencyNode.appendNode('scope', 'implementation')

                                            // for exclusions
                                            if (dep.excludeRules.size() > 0) {
                                                def exclusions = dependencyNode.appendNode('exclusions')
                                                dep.excludeRules.each { ExcludeRule ex ->
                                                    def exclusion = exclusions.appendNode('exclusion')
                                                    exclusion.appendNode('groupId', ex.group)
                                                    exclusion.appendNode('artifactId', ex.module)
                                                }
                                            }
                                        }
                                    }// end if
                                }
                            }
                        }
                    }
                }
                //end withXml
            }
        }
    }

    repositories {
        mavenLocal()
    }
}
